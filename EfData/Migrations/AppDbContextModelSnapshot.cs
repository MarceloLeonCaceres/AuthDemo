// <auto-generated />
using System;
using EfData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EfData.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Models.Entities.AuthAppUser.AppUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "869f332e-a84d-4803-af9b-91b4c679ecb9",
                            RoleId = "ab4cd34b-8232-4244-b459-cb150202c040"
                        },
                        new
                        {
                            UserId = "0d52f835-94e1-409e-b180-4f370f40f98d",
                            RoleId = "86e60536-b2ab-4ac5-85b8-e2afd8fe7058"
                        },
                        new
                        {
                            UserId = "9bc4b3f3-e392-41da-aa6a-8c65f8556192",
                            RoleId = "1b7d2e86-b210-4846-9530-16962a69af6d"
                        },
                        new
                        {
                            UserId = "2f81f8ad-5bcc-447a-bc33-7b30b87cefd7",
                            RoleId = "4899d69d-bfef-4a1b-972b-c66cc56b7a89"
                        },
                        new
                        {
                            UserId = "22472f44-f29e-4317-ac81-966e5c4a6035",
                            RoleId = "c8c2a86c-7c38-45e5-95ac-b067a19aea4f"
                        },
                        new
                        {
                            UserId = "5eb32700-9d1f-48fb-9116-cf9647747ff7",
                            RoleId = "017ba3c7-6860-48fe-a066-fe005ae54521"
                        });
                });

            modelBuilder.Entity("Models.Entities.AuthAppUser.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .IsFixedLength(false);

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(90)
                        .IsUnicode(false)
                        .HasColumnType("varchar(90)")
                        .IsFixedLength(false);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)")
                        .IsFixedLength(false);

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .IsFixedLength(false);

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("UserinfoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "869f332e-a84d-4803-af9b-91b4c679ecb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a4c46da5-ea50-4654-9e83-170f075112d6",
                            Email = "Admin123@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN123",
                            PasswordHash = "AQAAAAIAAYagAAAAEFTy5FP/ZWOknnqwJJ3rmAc924OL9dN/TFSIbWH15rL2idXwsjtT6Cgq3qSr7UPatQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "095f4806-8d9e-4522-b3a6-fd0f22e8809c",
                            TwoFactorEnabled = false,
                            UserName = "Admin123"
                        },
                        new
                        {
                            Id = "0d52f835-94e1-409e-b180-4f370f40f98d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "03adbccc-21e5-4fde-9d58-a319e104bc61",
                            Email = "aprueba1@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "APRUEBA1@EXAMPLE.COM",
                            NormalizedUserName = "APRUEBA1",
                            PasswordHash = "AQAAAAIAAYagAAAAEF+vlLpHoCmnzLh2rmj3WBhAnbRTffFY+3ehVlp70FGYHxB0JKm2riFT6UmMuTYH9A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b8d8f216-7d7d-4a44-9f49-c1813c84bc99",
                            TwoFactorEnabled = false,
                            UserName = "Aprueba1"
                        },
                        new
                        {
                            Id = "9bc4b3f3-e392-41da-aa6a-8c65f8556192",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "88a8851f-16a2-4ac8-b00c-6a1d673d0ad3",
                            Email = "aprueba3@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "APRUEBA3@EXAMPLE.COM",
                            NormalizedUserName = "APRUEBA3",
                            PasswordHash = "AQAAAAIAAYagAAAAEOMCy8/dk4EtCPHdqzXyyrr06Ow9hnNUusC3pUNib7Qk4V3SA7FHzVJRabh84fwHfg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "66812d70-6573-4a38-91e8-b51001f4a966",
                            TwoFactorEnabled = false,
                            UserName = "Aprueba3"
                        },
                        new
                        {
                            Id = "2f81f8ad-5bcc-447a-bc33-7b30b87cefd7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b0b7112b-1640-44e9-ba12-0a772f991285",
                            Email = "planeador1@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PLANEADOR1@EXAMPLE.COM",
                            NormalizedUserName = "PLANEADOR1",
                            PasswordHash = "AQAAAAIAAYagAAAAEF1qTwtqDFX03DHsj5vPH0devGbhOC9lY8GEF8TuPIezrDVVI+NQYbvrTjoP4y1w0Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2352b75d-8e69-454c-ae39-8bf8fe79df13",
                            TwoFactorEnabled = false,
                            UserName = "Planeador1"
                        },
                        new
                        {
                            Id = "22472f44-f29e-4317-ac81-966e5c4a6035",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "25406532-ce96-4671-a41e-9a10c13e4d2e",
                            Email = "thumano1@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "THUMANO1@EXAMPLE.COM",
                            NormalizedUserName = "THUMANO1",
                            PasswordHash = "AQAAAAIAAYagAAAAEDA5qIQvCkwbMAlN4EFaJOJjP0icglCACQSCRMJNmazfehf6YYCeoFr0yWaSRCNd7g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f410bd23-9557-48ed-bb70-73d8dbd09c40",
                            TwoFactorEnabled = false,
                            UserName = "THumano1"
                        },
                        new
                        {
                            Id = "5eb32700-9d1f-48fb-9116-cf9647747ff7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "90d723c3-3472-4438-afb4-275e6c3871a4",
                            Email = "reporte1@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "REPORTE1@EXAMPLE.COM",
                            NormalizedUserName = "REPORTE1",
                            PasswordHash = "AQAAAAIAAYagAAAAEEZc8YzmKK1pSq5hjAFH03OYUNxLvKG/BjAh9CIjwJIBAyvvygLIJgwJ1qjSESDVcg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "76dccb6a-f7b1-4c7e-8726-a44f449abeb7",
                            TwoFactorEnabled = false,
                            UserName = "Reporte1"
                        });
                });

            modelBuilder.Entity("Models.Entities.AuthAppUser.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ab4cd34b-8232-4244-b459-cb150202c040",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "4899d69d-bfef-4a1b-972b-c66cc56b7a89",
                            Name = "planificador",
                            NormalizedName = "PLANIFICADOR"
                        },
                        new
                        {
                            Id = "86e60536-b2ab-4ac5-85b8-e2afd8fe7058",
                            Name = "supervisorPermisos",
                            NormalizedName = "SUPERVISORPERMISOS"
                        },
                        new
                        {
                            Id = "1b7d2e86-b210-4846-9530-16962a69af6d",
                            Name = "supervisorMR",
                            NormalizedName = "SUPERVISORMR"
                        },
                        new
                        {
                            Id = "c8c2a86c-7c38-45e5-95ac-b067a19aea4f",
                            Name = "th",
                            NormalizedName = "TH"
                        },
                        new
                        {
                            Id = "bf52d74f-adb0-4a8a-b8fa-bb0141ab9a29",
                            Name = "user",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "017ba3c7-6860-48fe-a066-fe005ae54521",
                            Name = "visorReportes",
                            NormalizedName = "VISORREPORTES"
                        });
                });

            modelBuilder.Entity("Models.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DeptName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("IdPadre")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DeptName = "Empresa",
                            IdPadre = 0
                        },
                        new
                        {
                            Id = 2,
                            DeptName = "Financiero",
                            IdPadre = 1
                        },
                        new
                        {
                            Id = 3,
                            DeptName = "Ventas",
                            IdPadre = 1
                        },
                        new
                        {
                            Id = 4,
                            DeptName = "Talento Humano",
                            IdPadre = 1
                        },
                        new
                        {
                            Id = 5,
                            DeptName = "Marketing",
                            IdPadre = 3
                        });
                });

            modelBuilder.Entity("Models.Entities.Userinfo", b =>
                {
                    b.Property<int>("UserinfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserinfoId"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Badgenumber")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateOnly?>("HiredDay")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SSN")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("UserinfoId");

                    b.HasIndex("AppUserId")
                        .IsUnique()
                        .HasFilter("[AppUserId] IS NOT NULL");

                    b.HasIndex("Badgenumber")
                        .IsUnique();

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Name");

                    b.HasIndex("SSN")
                        .IsUnique()
                        .HasFilter("[SSN] IS NOT NULL");

                    b.ToTable("Usersinfo");

                    b.HasData(
                        new
                        {
                            UserinfoId = 1,
                            Badgenumber = "1",
                            DepartmentId = 1,
                            Email = "gacero@example.com",
                            Name = "ACERO GLORIA",
                            SSN = "1234567890"
                        },
                        new
                        {
                            UserinfoId = 2,
                            Badgenumber = "2",
                            DepartmentId = 1,
                            Email = "rbarcia@example.com",
                            Name = "BARCIA RUTH",
                            SSN = "1234567891"
                        },
                        new
                        {
                            UserinfoId = 3,
                            Badgenumber = "3",
                            DepartmentId = 1,
                            Email = "elopez@example.com",
                            Name = "LOPEZ EDDY",
                            SSN = "1234567892"
                        },
                        new
                        {
                            UserinfoId = 4,
                            Badgenumber = "4",
                            DepartmentId = 1,
                            Email = "dzapata@example.com",
                            Name = "ZAPATA DANIEL",
                            SSN = "1234567893"
                        },
                        new
                        {
                            UserinfoId = 5,
                            Badgenumber = "55",
                            DepartmentId = 2,
                            Email = "jvillacis@example.com",
                            Name = "JOSE VILLACIS",
                            SSN = "1234567894"
                        },
                        new
                        {
                            UserinfoId = 6,
                            Badgenumber = "66",
                            DepartmentId = 4,
                            Email = "pgaona@example.com",
                            Name = "PAULINA GAONA",
                            SSN = "1234567895"
                        },
                        new
                        {
                            UserinfoId = 7,
                            Badgenumber = "77",
                            DepartmentId = 5,
                            Email = "jlfornell@example.com",
                            Name = "JL FORNELL",
                            SSN = "1234567896"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Models.Entities.AuthAppUser.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Models.Entities.AuthAppUser.ApplicationUser", null)
                        .WithMany("AppUserClaims")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Models.Entities.AuthAppUser.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Models.Entities.AuthAppUser.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Models.Entities.AuthAppUser.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Entities.AuthAppUser.AppUserRole", b =>
                {
                    b.HasOne("Models.Entities.AuthAppUser.Role", "Role")
                        .WithMany("AppUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.AuthAppUser.ApplicationUser", "AppUser")
                        .WithMany("AppUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Models.Entities.Userinfo", b =>
                {
                    b.HasOne("Models.Entities.AuthAppUser.ApplicationUser", "AppUser")
                        .WithOne("Userinfo")
                        .HasForeignKey("Models.Entities.Userinfo", "AppUserId");

                    b.HasOne("Models.Entities.Department", "Department")
                        .WithMany("Userinfos")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Models.Entities.AuthAppUser.ApplicationUser", b =>
                {
                    b.Navigation("AppUserClaims");

                    b.Navigation("AppUserRoles");

                    b.Navigation("Userinfo");
                });

            modelBuilder.Entity("Models.Entities.AuthAppUser.Role", b =>
                {
                    b.Navigation("AppUserRoles");
                });

            modelBuilder.Entity("Models.Entities.Department", b =>
                {
                    b.Navigation("Userinfos");
                });
#pragma warning restore 612, 618
        }
    }
}
